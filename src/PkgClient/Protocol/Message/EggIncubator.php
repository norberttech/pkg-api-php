<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : Message.proto
 */


namespace PkgClient\Protocol\Message;

/**
 * Protobuf message : PkgClient.Protocol.Message.EggIncubator
 */
class EggIncubator extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * item_id optional string = 1
     *
     * @var string
     */
    protected $item_id = null;

    /**
     * item_type optional enum = 2
     *
     * @var \PkgClient\Protocol\Enum\ItemType
     */
    protected $item_type = null;

    /**
     * incubator_type optional enum = 3
     *
     * @var \PkgClient\Protocol\Enum\EggIncubatorType
     */
    protected $incubator_type = null;

    /**
     * uses_remaining optional int32 = 4
     *
     * @var int
     */
    protected $uses_remaining = null;

    /**
     * pokemon_id optional int64 = 5
     *
     * @var int
     */
    protected $pokemon_id = null;

    /**
     * start_km_walked optional double = 6
     *
     * @var float
     */
    protected $start_km_walked = null;

    /**
     * target_km_walked optional double = 7
     *
     * @var float
     */
    protected $target_km_walked = null;

    /**
     * Check if 'item_id' has a value
     *
     * @return bool
     */
    public function hasItemId()
    {
        return $this->item_id !== null;
    }

    /**
     * Get 'item_id' value
     *
     * @return string
     */
    public function getItemId()
    {
        return $this->item_id;
    }

    /**
     * Set 'item_id' value
     *
     * @param string $value
     */
    public function setItemId($value = null)
    {
        $this->item_id = $value;
    }

    /**
     * Check if 'item_type' has a value
     *
     * @return bool
     */
    public function hasItemType()
    {
        return $this->item_type !== null;
    }

    /**
     * Get 'item_type' value
     *
     * @return \PkgClient\Protocol\Enum\ItemType
     */
    public function getItemType()
    {
        return $this->item_type;
    }

    /**
     * Set 'item_type' value
     *
     * @param \PkgClient\Protocol\Enum\ItemType $value
     */
    public function setItemType(\PkgClient\Protocol\Enum\ItemType $value = null)
    {
        $this->item_type = $value;
    }

    /**
     * Check if 'incubator_type' has a value
     *
     * @return bool
     */
    public function hasIncubatorType()
    {
        return $this->incubator_type !== null;
    }

    /**
     * Get 'incubator_type' value
     *
     * @return \PkgClient\Protocol\Enum\EggIncubatorType
     */
    public function getIncubatorType()
    {
        return $this->incubator_type;
    }

    /**
     * Set 'incubator_type' value
     *
     * @param \PkgClient\Protocol\Enum\EggIncubatorType $value
     */
    public function setIncubatorType(\PkgClient\Protocol\Enum\EggIncubatorType $value = null)
    {
        $this->incubator_type = $value;
    }

    /**
     * Check if 'uses_remaining' has a value
     *
     * @return bool
     */
    public function hasUsesRemaining()
    {
        return $this->uses_remaining !== null;
    }

    /**
     * Get 'uses_remaining' value
     *
     * @return int
     */
    public function getUsesRemaining()
    {
        return $this->uses_remaining;
    }

    /**
     * Set 'uses_remaining' value
     *
     * @param int $value
     */
    public function setUsesRemaining($value = null)
    {
        $this->uses_remaining = $value;
    }

    /**
     * Check if 'pokemon_id' has a value
     *
     * @return bool
     */
    public function hasPokemonId()
    {
        return $this->pokemon_id !== null;
    }

    /**
     * Get 'pokemon_id' value
     *
     * @return int
     */
    public function getPokemonId()
    {
        return $this->pokemon_id;
    }

    /**
     * Set 'pokemon_id' value
     *
     * @param int $value
     */
    public function setPokemonId($value = null)
    {
        $this->pokemon_id = $value;
    }

    /**
     * Check if 'start_km_walked' has a value
     *
     * @return bool
     */
    public function hasStartKmWalked()
    {
        return $this->start_km_walked !== null;
    }

    /**
     * Get 'start_km_walked' value
     *
     * @return float
     */
    public function getStartKmWalked()
    {
        return $this->start_km_walked;
    }

    /**
     * Set 'start_km_walked' value
     *
     * @param float $value
     */
    public function setStartKmWalked($value = null)
    {
        $this->start_km_walked = $value;
    }

    /**
     * Check if 'target_km_walked' has a value
     *
     * @return bool
     */
    public function hasTargetKmWalked()
    {
        return $this->target_km_walked !== null;
    }

    /**
     * Get 'target_km_walked' value
     *
     * @return float
     */
    public function getTargetKmWalked()
    {
        return $this->target_km_walked;
    }

    /**
     * Set 'target_km_walked' value
     *
     * @param float $value
     */
    public function setTargetKmWalked($value = null)
    {
        $this->target_km_walked = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'item_id' => null,
            'item_type' => null,
            'incubator_type' => null,
            'uses_remaining' => null,
            'pokemon_id' => null,
            'start_km_walked' => null,
            'target_km_walked' => null
        ], $values);

        $message->setItemId($values['item_id']);
        $message->setItemType($values['item_type']);
        $message->setIncubatorType($values['incubator_type']);
        $message->setUsesRemaining($values['uses_remaining']);
        $message->setPokemonId($values['pokemon_id']);
        $message->setStartKmWalked($values['start_km_walked']);
        $message->setTargetKmWalked($values['target_km_walked']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'EggIncubator',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'item_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'item_type',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.PkgClient.Protocol.Enum.ItemType'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'incubator_type',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.PkgClient.Protocol.Enum.EggIncubatorType'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'uses_remaining',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'pokemon_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'start_km_walked',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_DOUBLE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'target_km_walked',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_DOUBLE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->item_id !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeString($stream, $this->item_id);
        }

        if ($this->item_type !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeVarint($stream, $this->item_type->value());
        }

        if ($this->incubator_type !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeVarint($stream, $this->incubator_type->value());
        }

        if ($this->uses_remaining !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeVarint($stream, $this->uses_remaining);
        }

        if ($this->pokemon_id !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeVarint($stream, $this->pokemon_id);
        }

        if ($this->start_km_walked !== null) {
            $writer->writeVarint($stream, 49);
            $writer->writeDouble($stream, $this->start_km_walked);
        }

        if ($this->target_km_walked !== null) {
            $writer->writeVarint($stream, 57);
            $writer->writeDouble($stream, $this->target_km_walked);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->item_id = $reader->readString($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                $this->item_type = \PkgClient\Protocol\Enum\ItemType::valueOf($reader->readVarint($stream));

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                $this->incubator_type = \PkgClient\Protocol\Enum\EggIncubatorType::valueOf($reader->readVarint($stream));

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->uses_remaining = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 3);

                $this->pokemon_id = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 1);

                $this->start_km_walked = $reader->readDouble($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 1);

                $this->target_km_walked = $reader->readDouble($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->item_id !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->item_id);
        }

        if ($this->item_type !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->item_type->value());
        }

        if ($this->incubator_type !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->incubator_type->value());
        }

        if ($this->uses_remaining !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->uses_remaining);
        }

        if ($this->pokemon_id !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->pokemon_id);
        }

        if ($this->start_km_walked !== null) {
            $size += 1;
            $size += 8;
        }

        if ($this->target_km_walked !== null) {
            $size += 1;
            $size += 8;
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->item_id = null;
        $this->item_type = null;
        $this->incubator_type = null;
        $this->uses_remaining = null;
        $this->pokemon_id = null;
        $this->start_km_walked = null;
        $this->target_km_walked = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \PkgClient\Protocol\Message\EggIncubator) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->item_id = ($message->item_id !== null) ? $message->item_id : $this->item_id;
        $this->item_type = ($message->item_type !== null) ? $message->item_type : $this->item_type;
        $this->incubator_type = ($message->incubator_type !== null) ? $message->incubator_type : $this->incubator_type;
        $this->uses_remaining = ($message->uses_remaining !== null) ? $message->uses_remaining : $this->uses_remaining;
        $this->pokemon_id = ($message->pokemon_id !== null) ? $message->pokemon_id : $this->pokemon_id;
        $this->start_km_walked = ($message->start_km_walked !== null) ? $message->start_km_walked : $this->start_km_walked;
        $this->target_km_walked = ($message->target_km_walked !== null) ? $message->target_km_walked : $this->target_km_walked;
    }


}

