<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : Message.proto
 */


namespace PkgClient\Protocol\Message;

/**
 * Protobuf message : PkgClient.Protocol.Message.Profile
 */
class Profile extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * creation_time required int64 = 1
     *
     * @var int
     */
    protected $creation_time = null;

    /**
     * username optional string = 2
     *
     * @var string
     */
    protected $username = null;

    /**
     * team optional enum = 5
     *
     * @var \PkgClient\Protocol\Enum\TeamColor
     */
    protected $team = null;

    /**
     * tutorial optional bytes = 7
     *
     * @var \Protobuf\Stream
     */
    protected $tutorial = null;

    /**
     * avatar optional message = 8
     *
     * @var \PkgClient\Protocol\Message\AvatarDetails
     */
    protected $avatar = null;

    /**
     * poke_storage optional int32 = 9
     *
     * @var int
     */
    protected $poke_storage = null;

    /**
     * item_storage optional int32 = 10
     *
     * @var int
     */
    protected $item_storage = null;

    /**
     * daily_bonus optional message = 11
     *
     * @var \PkgClient\Protocol\Message\DailyBonus
     */
    protected $daily_bonus = null;

    /**
     * unknown12 optional bytes = 12
     *
     * @var \Protobuf\Stream
     */
    protected $unknown12 = null;

    /**
     * unknown13 optional bytes = 13
     *
     * @var \Protobuf\Stream
     */
    protected $unknown13 = null;

    /**
     * currency repeated message = 14
     *
     * @var \Protobuf\Collection<\PkgClient\Protocol\Message\Currency>
     */
    protected $currency = null;

    /**
     * Check if 'creation_time' has a value
     *
     * @return bool
     */
    public function hasCreationTime()
    {
        return $this->creation_time !== null;
    }

    /**
     * Get 'creation_time' value
     *
     * @return int
     */
    public function getCreationTime()
    {
        return $this->creation_time;
    }

    /**
     * Set 'creation_time' value
     *
     * @param int $value
     */
    public function setCreationTime($value)
    {
        $this->creation_time = $value;
    }

    /**
     * Check if 'username' has a value
     *
     * @return bool
     */
    public function hasUsername()
    {
        return $this->username !== null;
    }

    /**
     * Get 'username' value
     *
     * @return string
     */
    public function getUsername()
    {
        return $this->username;
    }

    /**
     * Set 'username' value
     *
     * @param string $value
     */
    public function setUsername($value = null)
    {
        $this->username = $value;
    }

    /**
     * Check if 'team' has a value
     *
     * @return bool
     */
    public function hasTeam()
    {
        return $this->team !== null;
    }

    /**
     * Get 'team' value
     *
     * @return \PkgClient\Protocol\Enum\TeamColor
     */
    public function getTeam()
    {
        return $this->team;
    }

    /**
     * Set 'team' value
     *
     * @param \PkgClient\Protocol\Enum\TeamColor $value
     */
    public function setTeam(\PkgClient\Protocol\Enum\TeamColor $value = null)
    {
        $this->team = $value;
    }

    /**
     * Check if 'tutorial' has a value
     *
     * @return bool
     */
    public function hasTutorial()
    {
        return $this->tutorial !== null;
    }

    /**
     * Get 'tutorial' value
     *
     * @return \Protobuf\Stream
     */
    public function getTutorial()
    {
        return $this->tutorial;
    }

    /**
     * Set 'tutorial' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setTutorial($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->tutorial = $value;
    }

    /**
     * Check if 'avatar' has a value
     *
     * @return bool
     */
    public function hasAvatar()
    {
        return $this->avatar !== null;
    }

    /**
     * Get 'avatar' value
     *
     * @return \PkgClient\Protocol\Message\AvatarDetails
     */
    public function getAvatar()
    {
        return $this->avatar;
    }

    /**
     * Set 'avatar' value
     *
     * @param \PkgClient\Protocol\Message\AvatarDetails $value
     */
    public function setAvatar(\PkgClient\Protocol\Message\AvatarDetails $value = null)
    {
        $this->avatar = $value;
    }

    /**
     * Check if 'poke_storage' has a value
     *
     * @return bool
     */
    public function hasPokeStorage()
    {
        return $this->poke_storage !== null;
    }

    /**
     * Get 'poke_storage' value
     *
     * @return int
     */
    public function getPokeStorage()
    {
        return $this->poke_storage;
    }

    /**
     * Set 'poke_storage' value
     *
     * @param int $value
     */
    public function setPokeStorage($value = null)
    {
        $this->poke_storage = $value;
    }

    /**
     * Check if 'item_storage' has a value
     *
     * @return bool
     */
    public function hasItemStorage()
    {
        return $this->item_storage !== null;
    }

    /**
     * Get 'item_storage' value
     *
     * @return int
     */
    public function getItemStorage()
    {
        return $this->item_storage;
    }

    /**
     * Set 'item_storage' value
     *
     * @param int $value
     */
    public function setItemStorage($value = null)
    {
        $this->item_storage = $value;
    }

    /**
     * Check if 'daily_bonus' has a value
     *
     * @return bool
     */
    public function hasDailyBonus()
    {
        return $this->daily_bonus !== null;
    }

    /**
     * Get 'daily_bonus' value
     *
     * @return \PkgClient\Protocol\Message\DailyBonus
     */
    public function getDailyBonus()
    {
        return $this->daily_bonus;
    }

    /**
     * Set 'daily_bonus' value
     *
     * @param \PkgClient\Protocol\Message\DailyBonus $value
     */
    public function setDailyBonus(\PkgClient\Protocol\Message\DailyBonus $value = null)
    {
        $this->daily_bonus = $value;
    }

    /**
     * Check if 'unknown12' has a value
     *
     * @return bool
     */
    public function hasUnknown12()
    {
        return $this->unknown12 !== null;
    }

    /**
     * Get 'unknown12' value
     *
     * @return \Protobuf\Stream
     */
    public function getUnknown12()
    {
        return $this->unknown12;
    }

    /**
     * Set 'unknown12' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setUnknown12($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->unknown12 = $value;
    }

    /**
     * Check if 'unknown13' has a value
     *
     * @return bool
     */
    public function hasUnknown13()
    {
        return $this->unknown13 !== null;
    }

    /**
     * Get 'unknown13' value
     *
     * @return \Protobuf\Stream
     */
    public function getUnknown13()
    {
        return $this->unknown13;
    }

    /**
     * Set 'unknown13' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setUnknown13($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->unknown13 = $value;
    }

    /**
     * Check if 'currency' has a value
     *
     * @return bool
     */
    public function hasCurrencyList()
    {
        return $this->currency !== null;
    }

    /**
     * Get 'currency' value
     *
     * @return \Protobuf\Collection<\PkgClient\Protocol\Message\Currency>
     */
    public function getCurrencyList()
    {
        return $this->currency;
    }

    /**
     * Set 'currency' value
     *
     * @param \Protobuf\Collection<\PkgClient\Protocol\Message\Currency> $value
     */
    public function setCurrencyList(\Protobuf\Collection $value = null)
    {
        $this->currency = $value;
    }

    /**
     * Add a new element to 'currency'
     *
     * @param \PkgClient\Protocol\Message\Currency $value
     */
    public function addCurrency(\PkgClient\Protocol\Message\Currency $value)
    {
        if ($this->currency === null) {
            $this->currency = new \Protobuf\MessageCollection();
        }

        $this->currency->add($value);
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if ( ! isset($values['creation_time'])) {
            throw new \InvalidArgumentException('Field "creation_time" (tag 1) is required but has no value.');
        }

        $message = new self();
        $values  = array_merge([
            'username' => null,
            'team' => null,
            'tutorial' => null,
            'avatar' => null,
            'poke_storage' => null,
            'item_storage' => null,
            'daily_bonus' => null,
            'unknown12' => null,
            'unknown13' => null,
            'currency' => []
        ], $values);

        $message->setCreationTime($values['creation_time']);
        $message->setUsername($values['username']);
        $message->setTeam($values['team']);
        $message->setTutorial($values['tutorial']);
        $message->setAvatar($values['avatar']);
        $message->setPokeStorage($values['poke_storage']);
        $message->setItemStorage($values['item_storage']);
        $message->setDailyBonus($values['daily_bonus']);
        $message->setUnknown12($values['unknown12']);
        $message->setUnknown13($values['unknown13']);

        foreach ($values['currency'] as $item) {
            $message->addCurrency($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'Profile',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'creation_time',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'username',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'team',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.PkgClient.Protocol.Enum.TeamColor'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'tutorial',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'avatar',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.PkgClient.Protocol.Message.AvatarDetails'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'poke_storage',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'item_storage',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 11,
                    'name' => 'daily_bonus',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.PkgClient.Protocol.Message.DailyBonus'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 12,
                    'name' => 'unknown12',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 13,
                    'name' => 'unknown13',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 14,
                    'name' => 'currency',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.PkgClient.Protocol.Message.Currency'
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->creation_time === null) {
            throw new \UnexpectedValueException('Field "\\PkgClient\\Protocol\\Message\\Profile#creation_time" (tag 1) is required but has no value.');
        }

        if ($this->creation_time !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->creation_time);
        }

        if ($this->username !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeString($stream, $this->username);
        }

        if ($this->team !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeVarint($stream, $this->team->value());
        }

        if ($this->tutorial !== null) {
            $writer->writeVarint($stream, 58);
            $writer->writeByteStream($stream, $this->tutorial);
        }

        if ($this->avatar !== null) {
            $writer->writeVarint($stream, 66);
            $writer->writeVarint($stream, $this->avatar->serializedSize($sizeContext));
            $this->avatar->writeTo($context);
        }

        if ($this->poke_storage !== null) {
            $writer->writeVarint($stream, 72);
            $writer->writeVarint($stream, $this->poke_storage);
        }

        if ($this->item_storage !== null) {
            $writer->writeVarint($stream, 80);
            $writer->writeVarint($stream, $this->item_storage);
        }

        if ($this->daily_bonus !== null) {
            $writer->writeVarint($stream, 90);
            $writer->writeVarint($stream, $this->daily_bonus->serializedSize($sizeContext));
            $this->daily_bonus->writeTo($context);
        }

        if ($this->unknown12 !== null) {
            $writer->writeVarint($stream, 98);
            $writer->writeByteStream($stream, $this->unknown12);
        }

        if ($this->unknown13 !== null) {
            $writer->writeVarint($stream, 106);
            $writer->writeByteStream($stream, $this->unknown13);
        }

        if ($this->currency !== null) {
            foreach ($this->currency as $val) {
                $writer->writeVarint($stream, 114);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 3);

                $this->creation_time = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->username = $reader->readString($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                $this->team = \PkgClient\Protocol\Enum\TeamColor::valueOf($reader->readVarint($stream));

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->tutorial = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \PkgClient\Protocol\Message\AvatarDetails();

                $this->avatar = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->poke_storage = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->item_storage = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 11) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \PkgClient\Protocol\Message\DailyBonus();

                $this->daily_bonus = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 12) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->unknown12 = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 13) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->unknown13 = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 14) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \PkgClient\Protocol\Message\Currency();

                if ($this->currency === null) {
                    $this->currency = new \Protobuf\MessageCollection();
                }

                $this->currency->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->creation_time !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->creation_time);
        }

        if ($this->username !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->username);
        }

        if ($this->team !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->team->value());
        }

        if ($this->tutorial !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->tutorial);
        }

        if ($this->avatar !== null) {
            $innerSize = $this->avatar->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->poke_storage !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->poke_storage);
        }

        if ($this->item_storage !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->item_storage);
        }

        if ($this->daily_bonus !== null) {
            $innerSize = $this->daily_bonus->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->unknown12 !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->unknown12);
        }

        if ($this->unknown13 !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->unknown13);
        }

        if ($this->currency !== null) {
            foreach ($this->currency as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->creation_time = null;
        $this->username = null;
        $this->team = null;
        $this->tutorial = null;
        $this->avatar = null;
        $this->poke_storage = null;
        $this->item_storage = null;
        $this->daily_bonus = null;
        $this->unknown12 = null;
        $this->unknown13 = null;
        $this->currency = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \PkgClient\Protocol\Message\Profile) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->creation_time = ($message->creation_time !== null) ? $message->creation_time : $this->creation_time;
        $this->username = ($message->username !== null) ? $message->username : $this->username;
        $this->team = ($message->team !== null) ? $message->team : $this->team;
        $this->tutorial = ($message->tutorial !== null) ? $message->tutorial : $this->tutorial;
        $this->avatar = ($message->avatar !== null) ? $message->avatar : $this->avatar;
        $this->poke_storage = ($message->poke_storage !== null) ? $message->poke_storage : $this->poke_storage;
        $this->item_storage = ($message->item_storage !== null) ? $message->item_storage : $this->item_storage;
        $this->daily_bonus = ($message->daily_bonus !== null) ? $message->daily_bonus : $this->daily_bonus;
        $this->unknown12 = ($message->unknown12 !== null) ? $message->unknown12 : $this->unknown12;
        $this->unknown13 = ($message->unknown13 !== null) ? $message->unknown13 : $this->unknown13;
        $this->currency = ($message->currency !== null) ? $message->currency : $this->currency;
    }


}

