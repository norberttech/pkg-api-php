<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : Enum.proto
 */


namespace PkgClient\Protocol\Enum;

/**
 * Protobuf enum : PkgClient.Protocol.Enum.CameraInterpolation
 */
class CameraInterpolation extends \Protobuf\Enum
{

    /**
     * CAM_INTERP_CUT = 0
     */
    const CAM_INTERP_CUT_VALUE = 0;

    /**
     * CAM_INTERP_LINEAR = 1
     */
    const CAM_INTERP_LINEAR_VALUE = 1;

    /**
     * CAM_INTERP_SMOOTH = 2
     */
    const CAM_INTERP_SMOOTH_VALUE = 2;

    /**
     * CAM_INTERP_SMOOTH_ROT_LINEAR_MOVE = 3
     */
    const CAM_INTERP_SMOOTH_ROT_LINEAR_MOVE_VALUE = 3;

    /**
     * CAM_INTERP_DEPENDS = 4
     */
    const CAM_INTERP_DEPENDS_VALUE = 4;

    /**
     * @var \PkgClient\Protocol\Enum\CameraInterpolation
     */
    protected static $CAM_INTERP_CUT = null;

    /**
     * @var \PkgClient\Protocol\Enum\CameraInterpolation
     */
    protected static $CAM_INTERP_LINEAR = null;

    /**
     * @var \PkgClient\Protocol\Enum\CameraInterpolation
     */
    protected static $CAM_INTERP_SMOOTH = null;

    /**
     * @var \PkgClient\Protocol\Enum\CameraInterpolation
     */
    protected static $CAM_INTERP_SMOOTH_ROT_LINEAR_MOVE = null;

    /**
     * @var \PkgClient\Protocol\Enum\CameraInterpolation
     */
    protected static $CAM_INTERP_DEPENDS = null;

    /**
     * @return \PkgClient\Protocol\Enum\CameraInterpolation
     */
    public static function CAM_INTERP_CUT()
    {
        if (self::$CAM_INTERP_CUT !== null) {
            return self::$CAM_INTERP_CUT;
        }

        return self::$CAM_INTERP_CUT = new self('CAM_INTERP_CUT', self::CAM_INTERP_CUT_VALUE);
    }

    /**
     * @return \PkgClient\Protocol\Enum\CameraInterpolation
     */
    public static function CAM_INTERP_LINEAR()
    {
        if (self::$CAM_INTERP_LINEAR !== null) {
            return self::$CAM_INTERP_LINEAR;
        }

        return self::$CAM_INTERP_LINEAR = new self('CAM_INTERP_LINEAR', self::CAM_INTERP_LINEAR_VALUE);
    }

    /**
     * @return \PkgClient\Protocol\Enum\CameraInterpolation
     */
    public static function CAM_INTERP_SMOOTH()
    {
        if (self::$CAM_INTERP_SMOOTH !== null) {
            return self::$CAM_INTERP_SMOOTH;
        }

        return self::$CAM_INTERP_SMOOTH = new self('CAM_INTERP_SMOOTH', self::CAM_INTERP_SMOOTH_VALUE);
    }

    /**
     * @return \PkgClient\Protocol\Enum\CameraInterpolation
     */
    public static function CAM_INTERP_SMOOTH_ROT_LINEAR_MOVE()
    {
        if (self::$CAM_INTERP_SMOOTH_ROT_LINEAR_MOVE !== null) {
            return self::$CAM_INTERP_SMOOTH_ROT_LINEAR_MOVE;
        }

        return self::$CAM_INTERP_SMOOTH_ROT_LINEAR_MOVE = new self('CAM_INTERP_SMOOTH_ROT_LINEAR_MOVE', self::CAM_INTERP_SMOOTH_ROT_LINEAR_MOVE_VALUE);
    }

    /**
     * @return \PkgClient\Protocol\Enum\CameraInterpolation
     */
    public static function CAM_INTERP_DEPENDS()
    {
        if (self::$CAM_INTERP_DEPENDS !== null) {
            return self::$CAM_INTERP_DEPENDS;
        }

        return self::$CAM_INTERP_DEPENDS = new self('CAM_INTERP_DEPENDS', self::CAM_INTERP_DEPENDS_VALUE);
    }

    /**
     * @param int $value
     * @return \PkgClient\Protocol\Enum\CameraInterpolation
     */
    public static function valueOf($value)
    {
        switch ($value) {
            case 0: return self::CAM_INTERP_CUT();
            case 1: return self::CAM_INTERP_LINEAR();
            case 2: return self::CAM_INTERP_SMOOTH();
            case 3: return self::CAM_INTERP_SMOOTH_ROT_LINEAR_MOVE();
            case 4: return self::CAM_INTERP_DEPENDS();
            default: return null;
        }
    }


}

