<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : Communication.proto
 */


namespace PkgClient\Protocol\Communication;

/**
 * Protobuf message : PkgClient.Protocol.Communication.Response
 */
class Response extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * direction required enum = 1
     *
     * @var \PkgClient\Protocol\Enum\RpcDirection
     */
    protected $direction = null;

    /**
     * unknown2 optional int64 = 2
     *
     * @var int
     */
    protected $unknown2 = null;

    /**
     * api_url optional string = 3
     *
     * @var string
     */
    protected $api_url = null;

    /**
     * unknown6 required message = 6
     *
     * @var \PkgClient\Protocol\Communication\Response\Unknown6
     */
    protected $unknown6 = null;

    /**
     * auth_ticket optional message = 7
     *
     * @var \PkgClient\Protocol\Communication\AuthTicket
     */
    protected $auth_ticket = null;

    /**
     * responses repeated bytes = 100
     *
     * @var \Protobuf\Collection
     */
    protected $responses = null;

    /**
     * Check if 'direction' has a value
     *
     * @return bool
     */
    public function hasDirection()
    {
        return $this->direction !== null;
    }

    /**
     * Get 'direction' value
     *
     * @return \PkgClient\Protocol\Enum\RpcDirection
     */
    public function getDirection()
    {
        return $this->direction;
    }

    /**
     * Set 'direction' value
     *
     * @param \PkgClient\Protocol\Enum\RpcDirection $value
     */
    public function setDirection(\PkgClient\Protocol\Enum\RpcDirection $value)
    {
        $this->direction = $value;
    }

    /**
     * Check if 'unknown2' has a value
     *
     * @return bool
     */
    public function hasUnknown2()
    {
        return $this->unknown2 !== null;
    }

    /**
     * Get 'unknown2' value
     *
     * @return int
     */
    public function getUnknown2()
    {
        return $this->unknown2;
    }

    /**
     * Set 'unknown2' value
     *
     * @param int $value
     */
    public function setUnknown2($value = null)
    {
        $this->unknown2 = $value;
    }

    /**
     * Check if 'api_url' has a value
     *
     * @return bool
     */
    public function hasApiUrl()
    {
        return $this->api_url !== null;
    }

    /**
     * Get 'api_url' value
     *
     * @return string
     */
    public function getApiUrl()
    {
        return $this->api_url;
    }

    /**
     * Set 'api_url' value
     *
     * @param string $value
     */
    public function setApiUrl($value = null)
    {
        $this->api_url = $value;
    }

    /**
     * Check if 'unknown6' has a value
     *
     * @return bool
     */
    public function hasUnknown6()
    {
        return $this->unknown6 !== null;
    }

    /**
     * Get 'unknown6' value
     *
     * @return \PkgClient\Protocol\Communication\Response\Unknown6
     */
    public function getUnknown6()
    {
        return $this->unknown6;
    }

    /**
     * Set 'unknown6' value
     *
     * @param \PkgClient\Protocol\Communication\Response\Unknown6 $value
     */
    public function setUnknown6(\PkgClient\Protocol\Communication\Response\Unknown6 $value)
    {
        $this->unknown6 = $value;
    }

    /**
     * Check if 'auth_ticket' has a value
     *
     * @return bool
     */
    public function hasAuthTicket()
    {
        return $this->auth_ticket !== null;
    }

    /**
     * Get 'auth_ticket' value
     *
     * @return \PkgClient\Protocol\Communication\AuthTicket
     */
    public function getAuthTicket()
    {
        return $this->auth_ticket;
    }

    /**
     * Set 'auth_ticket' value
     *
     * @param \PkgClient\Protocol\Communication\AuthTicket $value
     */
    public function setAuthTicket(\PkgClient\Protocol\Communication\AuthTicket $value = null)
    {
        $this->auth_ticket = $value;
    }

    /**
     * Check if 'responses' has a value
     *
     * @return bool
     */
    public function hasResponsesList()
    {
        return $this->responses !== null;
    }

    /**
     * Get 'responses' value
     *
     * @return \Protobuf\Collection
     */
    public function getResponsesList()
    {
        return $this->responses;
    }

    /**
     * Set 'responses' value
     *
     * @param \Protobuf\Collection $value
     */
    public function setResponsesList(\Protobuf\Collection $value = null)
    {
        $this->responses = $value;
    }

    /**
     * Add a new element to 'responses'
     *
     * @param \Protobuf\Stream $value
     */
    public function addResponses($value)
    {
        if ($this->responses === null) {
            $this->responses = new \Protobuf\StreamCollection();
        }

        $this->responses->add(\Protobuf\Stream::wrap($value));
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if ( ! isset($values['direction'])) {
            throw new \InvalidArgumentException('Field "direction" (tag 1) is required but has no value.');
        }

        if ( ! isset($values['unknown6'])) {
            throw new \InvalidArgumentException('Field "unknown6" (tag 6) is required but has no value.');
        }

        $message = new self();
        $values  = array_merge([
            'unknown2' => null,
            'api_url' => null,
            'auth_ticket' => null,
            'responses' => []
        ], $values);

        $message->setDirection($values['direction']);
        $message->setUnknown2($values['unknown2']);
        $message->setApiUrl($values['api_url']);
        $message->setUnknown6($values['unknown6']);
        $message->setAuthTicket($values['auth_ticket']);

        foreach ($values['responses'] as $item) {
            $message->addResponses($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'Response',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'direction',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED(),
                    'type_name' => '.PkgClient.Protocol.Enum.RpcDirection'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'unknown2',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'api_url',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'unknown6',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED(),
                    'type_name' => '.PkgClient.Protocol.Communication.Response.Unknown6'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'auth_ticket',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.PkgClient.Protocol.Communication.AuthTicket'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 100,
                    'name' => 'responses',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->direction === null) {
            throw new \UnexpectedValueException('Field "\\PkgClient\\Protocol\\Communication\\Response#direction" (tag 1) is required but has no value.');
        }

        if ($this->unknown6 === null) {
            throw new \UnexpectedValueException('Field "\\PkgClient\\Protocol\\Communication\\Response#unknown6" (tag 6) is required but has no value.');
        }

        if ($this->direction !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->direction->value());
        }

        if ($this->unknown2 !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeVarint($stream, $this->unknown2);
        }

        if ($this->api_url !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeString($stream, $this->api_url);
        }

        if ($this->unknown6 !== null) {
            $writer->writeVarint($stream, 50);
            $writer->writeVarint($stream, $this->unknown6->serializedSize($sizeContext));
            $this->unknown6->writeTo($context);
        }

        if ($this->auth_ticket !== null) {
            $writer->writeVarint($stream, 58);
            $writer->writeVarint($stream, $this->auth_ticket->serializedSize($sizeContext));
            $this->auth_ticket->writeTo($context);
        }

        if ($this->responses !== null) {
            foreach ($this->responses as $val) {
                $writer->writeVarint($stream, 802);
                $writer->writeByteStream($stream, $val);
            }
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                $this->direction = \PkgClient\Protocol\Enum\RpcDirection::valueOf($reader->readVarint($stream));

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 3);

                $this->unknown2 = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->api_url = $reader->readString($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \PkgClient\Protocol\Communication\Response\Unknown6();

                $this->unknown6 = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \PkgClient\Protocol\Communication\AuthTicket();

                $this->auth_ticket = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 100) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                if ($this->responses === null) {
                    $this->responses = new \Protobuf\StreamCollection();
                }

                $this->responses->add($reader->readByteStream($stream));

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->direction !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->direction->value());
        }

        if ($this->unknown2 !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->unknown2);
        }

        if ($this->api_url !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->api_url);
        }

        if ($this->unknown6 !== null) {
            $innerSize = $this->unknown6->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->auth_ticket !== null) {
            $innerSize = $this->auth_ticket->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->responses !== null) {
            foreach ($this->responses as $val) {
                $size += 2;
                $size += $calculator->computeByteStreamSize($val);
            }
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->direction = null;
        $this->unknown2 = null;
        $this->api_url = null;
        $this->unknown6 = null;
        $this->auth_ticket = null;
        $this->responses = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \PkgClient\Protocol\Communication\Response) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->direction = ($message->direction !== null) ? $message->direction : $this->direction;
        $this->unknown2 = ($message->unknown2 !== null) ? $message->unknown2 : $this->unknown2;
        $this->api_url = ($message->api_url !== null) ? $message->api_url : $this->api_url;
        $this->unknown6 = ($message->unknown6 !== null) ? $message->unknown6 : $this->unknown6;
        $this->auth_ticket = ($message->auth_ticket !== null) ? $message->auth_ticket : $this->auth_ticket;
        $this->responses = ($message->responses !== null) ? $message->responses : $this->responses;
    }


}

